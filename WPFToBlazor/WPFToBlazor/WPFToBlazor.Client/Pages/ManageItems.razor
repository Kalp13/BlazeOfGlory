@page "/manageitems"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@using ApiClient.Models
@inject HttpClient Http
@inject WPFToBlazor.ApiClient.ApiClient apiClient

@code {
    private List<CategoryApiModel> Categories = new();
    private List<ItemApiModel> Products = new();
    private string? selectedCategory;
    private ItemApiModel? selectedProduct;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            Categories = await apiClient.GetAllCategoriesAsync() ?? new();
            Products = await apiClient.GetAllItemsAsync() ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load data: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<ItemApiModel> FilteredProducts =>
        string.IsNullOrEmpty(selectedCategory)
            ? Products
            : Products.Where(p => p.Category == selectedCategory);

    private void OnCategoryClick(CategoryApiModel cat)
    {
        selectedCategory = cat.Name;
        selectedProduct = null;
    }

    private void OnProductClick(ItemApiModel prod)
    {
        selectedProduct = prod;
    }

    private void AddItem()
    {
        Navigation.NavigateTo("/addedititem");
    }

    private void EditItem()
    {
        if (selectedProduct is not null)
        {
            Navigation.NavigateTo($"/addedititem?id={selectedProduct.ItemId}");
        }
    }

    private async Task DeleteItem()
    {
        if (selectedProduct is not null)
        {
            try
            {
                await apiClient.DeleteItemAsync(selectedProduct.ItemId);
                Products.Remove(selectedProduct);
                selectedProduct = null;
            }
            catch (Exception ex)
            {
                errorMessage = "Failed to delete item: " + ex.Message;
            }
        }
    }

    private bool CanEdit => selectedProduct is not null;
}

<div class="container-fluid py-3">
    @if (isLoading)
    {
        <div>Loading...</div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else
    {
        <!-- Control Bar -->
        <div class="d-flex justify-content-end mb-2">
            <button class="btn btn-light btn-sm mx-1" title="Close"><i class="fa fa-times"></i></button>
            <button class="btn btn-light btn-sm mx-1" title="Maximize"><i class="fa fa-window-maximize"></i></button>
            <button class="btn btn-light btn-sm mx-1" title="Minimize"><i class="fa fa-window-minimize"></i></button>
        </div>

        <!-- Header -->
        <div class="row mb-3">
            <div class="col-3">
                <div class="bg-dark text-white rounded p-2 text-center fw-bold" style="font-size: 1.3rem;">Categories</div>
            </div>
            <div class="col">
                <div class="bg-dark text-white rounded p-2 text-center fw-bold" style="font-size: 1.3rem;">Product List</div>
            </div>
        </div>

        <!-- Content -->
        <div class="row" style="min-height: 500px;">
            <!-- Categories -->
            <div class="col-3">
                <div class="bg-light rounded p-3 mb-3" style="min-height: 300px;">
                    @foreach (var cat in Categories)
                    {
                        <button class="btn btn-primary w-100 mb-2 @(selectedCategory == cat.Name ? "active" : "")"
                                @onclick="() => OnCategoryClick(cat)">
                            @cat.Name
                        </button>
                    }
                </div>
                <div class="d-grid gap-2">
                    <button class="btn btn-purple" @onclick="AddItem">Add</button>
                    <button class="btn btn-purple" @onclick="EditItem" disabled="@(!CanEdit)">Edit</button>
                    <button class="btn btn-purple" @onclick="DeleteItem" disabled="@(!CanEdit)">Delete</button>
                </div>
            </div>

            <!-- Products -->
            <div class="col">
                <div class="bg-light rounded p-3" style="min-height: 300px;">
                    <div class="d-flex flex-wrap">
                        @foreach (var prod in FilteredProducts)
                        {
                            <div class="card m-2 @(selectedProduct == prod ? "border-primary" : "")"
                                 style="width: 120px; border: 2px solid #fff; border-radius: 10px; cursor:pointer;"
                                 @onclick="() => OnProductClick(prod)">
                                <img src="@prod.Photo" class="card-img-top" style="height: 100px; object-fit: cover; border-radius: 5px;" />
                                <div class="card-body p-2">
                                    <div class="fw-bold" style="font-size: 13px;">@prod.Name</div>
                                    <div style="font-size: 15px;">@prod.Price</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .btn-purple {
        background-color: #a020f0;
        color: #fff;
    }

    .btn-purple:hover {
        background-color: #8a16c1;
        color: #fff;
    }

    .border-primary {
        border: 2px solid #007bff !important;
    }
</style>

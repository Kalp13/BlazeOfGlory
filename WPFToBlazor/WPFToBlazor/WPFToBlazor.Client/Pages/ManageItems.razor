@page "/manageitems"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation

@code {
    // Sample data models
    public class Category
    {
        public string Name { get; set; } = "";
    }
    public class Product
    {
        public string ItemName { get; set; } = "";
        public decimal ItemPrice { get; set; }
        public string? ItemPhoto { get; set; }
        public string Category { get; set; } = "";
    }

    // Sample data
    private List<Category> Categories = new()
    {
        new Category { Name = "Biscuits" },
        new Category { Name = "Soft Drinks" },
        new Category { Name = "Chocolates" },
        new Category { Name = "Chips" },
        new Category { Name = "Juices" }
    };

    private List<Product> Products = new()
    {
        new Product { ItemName = "Oreo", ItemPrice = 25, ItemPhoto = null, Category = "Biscuits" },
        new Product { ItemName = "Marie Gold", ItemPrice = 20, ItemPhoto = null, Category = "Biscuits" },
        new Product { ItemName = "Coca Cola", ItemPrice = 35, ItemPhoto = null, Category = "Soft Drinks" },
        new Product { ItemName = "Pepsi", ItemPrice = 30, ItemPhoto = null, Category = "Soft Drinks" },
        new Product { ItemName = "Dairy Milk", ItemPrice = 50, ItemPhoto = null, Category = "Chocolates" },
        new Product { ItemName = "KitKat", ItemPrice = 45, ItemPhoto = null, Category = "Chocolates" },
        new Product { ItemName = "Lays Classic", ItemPrice = 15, ItemPhoto = null, Category = "Chips" },
        new Product { ItemName = "Doritos", ItemPrice = 40, ItemPhoto = null, Category = "Chips" },
        new Product { ItemName = "Orange Juice", ItemPrice = 60, ItemPhoto = null, Category = "Juices" },
        new Product { ItemName = "Apple Juice", ItemPrice = 65, ItemPhoto = null, Category = "Juices" }
    };

    private string? selectedCategory;
    private Product? selectedProduct;

    private IEnumerable<Product> FilteredProducts =>
        string.IsNullOrEmpty(selectedCategory)
            ? Products
            : Products.Where(p => p.Category == selectedCategory);

    private void OnCategoryClick(Category cat)
    {
        selectedCategory = cat.Name;
    }

    private void OnProductClick(Product prod)
    {
        selectedProduct = prod;
    }

    private bool showAddModal = false;
    private bool isEditMode = false;
    private string newProductName = "";
    private decimal newProductPrice = 0;
    private string? newProductCategory = null;

    private void AddItem()
    {
        isEditMode = false;
        newProductName = "";
        newProductPrice = 0;
        newProductCategory = selectedCategory ?? Categories.FirstOrDefault()?.Name;
        showAddModal = true;
    }

    private void EditItem()
    {
        if (selectedProduct is not null)
        {
            isEditMode = true;
            newProductName = selectedProduct.ItemName;
            newProductPrice = selectedProduct.ItemPrice;
            newProductCategory = selectedProduct.Category;
            showAddModal = true;
        }
    }

    private void ConfirmAddItem()
    {
        if (!string.IsNullOrWhiteSpace(newProductName) && !string.IsNullOrWhiteSpace(newProductCategory))
        {
            if (isEditMode && selectedProduct is not null)
            {
                selectedProduct.ItemName = newProductName;
                selectedProduct.ItemPrice = newProductPrice;
                selectedProduct.Category = newProductCategory;
            }
            else
            {
                var newProduct = new Product
                {
                    ItemName = newProductName,
                    ItemPrice = newProductPrice,
                    ItemPhoto = null,
                    Category = newProductCategory
                };
                Products.Add(newProduct);
                selectedProduct = newProduct;
                selectedCategory = newProductCategory;
            }
        }
        showAddModal = false;
    }

    private void CancelAddItem()
    {
        showAddModal = false;
    }

    private void DeleteItem()
    {
        if (selectedProduct is not null)
        {
            Products.Remove(selectedProduct);
            selectedProduct = null;
        }
    }

    private bool CanEdit => selectedProduct is not null;
}

<div class="container-fluid py-3">
    <!-- Control Bar -->
    <div class="d-flex justify-content-end mb-2">
        <button class="btn btn-light btn-sm mx-1" title="Close"><i class="fa fa-times"></i></button>
        <button class="btn btn-light btn-sm mx-1" title="Maximize"><i class="fa fa-window-maximize"></i></button>
        <button class="btn btn-light btn-sm mx-1" title="Minimize"><i class="fa fa-window-minimize"></i></button>
    </div>

    <!-- Header -->
    <div class="row mb-3">
        <div class="col-3">
            <div class="bg-dark text-white rounded p-2 text-center fw-bold" style="font-size: 1.3rem;">Categories</div>
        </div>
        <div class="col">
            <div class="bg-dark text-white rounded p-2 text-center fw-bold" style="font-size: 1.3rem;">Product List</div>
        </div>
    </div>

    <!-- Content -->
    <div class="row" style="min-height: 500px;">
        <!-- Categories -->
        <div class="col-3">
            <div class="bg-light rounded p-3 mb-3" style="min-height: 300px;">
                @foreach (var cat in Categories)
                {
                    <button class="btn btn-primary w-100 mb-2" @onclick="() => OnCategoryClick(cat)">
                        @cat.Name
                    </button>
                }
            </div>
            <div class="d-grid gap-2">
                <button class="btn btn-purple" @onclick="AddItem">Add</button>
                <button class="btn btn-purple" @onclick="EditItem" disabled="@(!CanEdit)">Edit</button>
                <button class="btn btn-purple" @onclick="DeleteItem">Delete</button>
            </div>
        </div>

        <!-- Products -->
        <div class="col">
            <div class="bg-light rounded p-3" style="min-height: 300px;">
                <div class="d-flex flex-wrap">
                    @foreach (var prod in FilteredProducts)
                    {
                        <div class="card m-2 @(selectedProduct == prod ? "border-primary" : "")"
                             style="width: 120px; border: 2px solid #fff; border-radius: 10px; cursor:pointer;"
                             @onclick="() => OnProductClick(prod)">
                            <img src="@prod.ItemPhoto" class="card-img-top" style="height: 100px; object-fit: cover; border-radius: 5px;" />
                            <div class="card-body p-2">
                                <div class="fw-bold" style="font-size: 13px;">@prod.ItemName</div>
                                <div style="font-size: 15px;">@prod.ItemPrice</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Product Modal -->
    @if (showAddModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@((isEditMode ? "Edit" : "Add") + " Product")</h5>
                        <button type="button" class="btn-close" @onclick="CancelAddItem"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input class="form-control" @bind="newProductName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Price</label>
                            <input class="form-control" type="number" step="0.01" @bind="newProductPrice" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <select class="form-select" @bind="newProductCategory">
                                @foreach (var cat in Categories)
                                {
                                    <option value="@cat.Name">@cat.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CancelAddItem">Cancel</button>
                        <button class="btn btn-primary" @onclick="ConfirmAddItem" disabled="@string.IsNullOrWhiteSpace(newProductName)">
                            @(isEditMode ? "Save" : "Add")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .btn-purple {
        background-color: #a020f0;
        color: #fff;
    }

    .btn-purple:hover {
        background-color: #8a16c1;
        color: #fff;
    }

    .border-primary {
        border: 2px solid #007bff !important;
    }
</style>
